{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf230
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
{\info
{\title Advanced Debugging}
{\subject Debugging in XCode4}
{\doccomm Prepared for the Boulder iOS Developers Meetup, January 2012}
{\author Kendall Helmstetter Gelner}
{\*\company KiGi Software}
{\*\copyright \'a9 2012 Kigi Software, LLC.}
{\keywords Debugging, iOS, XCode, KIGI}}\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc

\f0\b\fs36 \cf0 IOS Meetup Boulder Jan 2012\

\fs48 Advanced Debugging\

\fs36 \

\fs28 Kendall Helmstetter Gelner
\b0 \
@kendalldevdiary\
Kendall.Gelner@KiGiSoftware.com\
Feel free to email any questions!
\fs36 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 Notes from the meetup:\
\

\b Fun And Useful!\

\b0\fs28 Network link conditioner - throttle laptop connection speed\
	To use, install the preference pane from:\
	/Developer/Applications/Utilities/Network\\ Link\\ Conditioner\
\
Simulator - the Debug menu has options for slowing animation, or showing blended/misaligned images.\
	Blended is for alpha - Red has some, Green has none\
	Misaligned shows distortions - Yellow stretched, Magenta is misaligned (half pixel)\
\
The Core Animation Instrument can show you those and more on device!\
\
The Time Profiler instrument can show you what things need tuning.\
\
Use Debug audio breakpoints to give you an idea what things are occurring, without interrupting your Flow.
\b\fs36 \
\
Make Things Work.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b0\fs28 \cf0 Replace NSLog with DNSLog\
	Protects against too much logging in release builds\
	Use various DNSLog macros from KGDebugging.pch, put in your own PCH file.\
	Requires DEBUG=1 in Preprocessor flags, set by default in new projects.\
\
For CoreData, use debugDescription to produce more meaningful output in logs.\
\
In the debugger, use 
\b [object valueForKey:@"objectKey"]
\b0  to display values.\
\
To call into class methods, or otherwise make a call you know works force the system to attempt the call:\

\b 	po [NSClassFromString(@"ClassName")  classMethod]\

\b0 \
To use conditional breakpoints, rely on BOOL or int comparisons.\
\
If Instruments gives you "Failed to get Task" message, fix the certificate!\
You can manually tell Instruments where to find your symbol files, it's in:\
	
\b ~/Library/Developer/XCode/DerivedData/YourProject/Build/Products/Release-iPhoneOS/YourProject.app.DSYM
\b0 \

\b\fs36 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 Unraveling Mysteries!\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b0\fs28 \cf0 	In Allocations, use Heapshot to examine memory between sections\
	In Leaks, use Cycles and Roots to get a better picture (sometimes)\
	But both are not as important, if you just use ARC and focus on logic issues!\
		\
	Create your own custom instruments to track call origins or to make recording more meaningful (viewWillAppear).\
\
	Core Data Debugging:\
	Instruments can show saves and faults and other things.\
	You can also check out the state of objects in a context, like objects modified:		
\b po [context updatedObjects]\

\b0 \
	Proxy examination of traffic - use iPhone Configuration Utility, downloaded from Apple Enterprise Support:\

\b 	http://www.apple.com/support/iphone/enterprise/\

\b0 	Then create a custom profile with WiFi settings for your location and proxy settings to use your computer as a proxy.\
\
	Also there is a Push debugging profile in this directory (APNsLogging.mobileConfig), install on device to enable advanced Push logging (thanks to Matt Drance).\
\
}